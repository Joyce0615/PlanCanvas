import { DiagramRequest, DiagramResponse, AgentResponse, DiagramData } from '../types';

// Mock bubble sort diagram data
const BUBBLE_SORT_DIAGRAM: DiagramData = {
  elements: [
    {
      id: "rect1",
      type: "rectangle",
      version: 1,
      versionNonce: 1,
      isDeleted: false,
      x: 100,
      y: 100,
      width: 60,
      height: 60,
      angle: 0,
      strokeColor: "#000000",
      backgroundColor: "#ffec99",
      fillStyle: "solid",
      strokeWidth: 2,
      strokeStyle: "solid",
      roughness: 0,
      opacity: 100,
      groupIds: [],
      roundness: null,
      boundElements: [{ type: "text", id: "text1" }],
    },
    {
      id: "text1",
      type: "text",
      version: 1,
      versionNonce: 1,
      isDeleted: false,
      x: 120,
      y: 120,
      width: 20,
      height: 20,
      angle: 0,
      strokeColor: "#000000",
      backgroundColor: "transparent",
      fillStyle: "solid",
      strokeWidth: 2,
      strokeStyle: "solid",
      roughness: 0,
      opacity: 100,
      groupIds: [],
      roundness: null,
      boundElements: [],
      text: "5",
      fontSize: 20,
      fontFamily: 1,
      textAlign: "center",
      verticalAlign: "middle",
      baseline: 18,
      containerId: "rect1",
      originalText: "5"
    },
    {
      id: "rect2",
      type: "rectangle",
      version: 1,
      versionNonce: 1,
      isDeleted: false,
      x: 200,
      y: 100,
      width: 60,
      height: 60,
      angle: 0,
      strokeColor: "#000000",
      backgroundColor: "#ffec99",
      fillStyle: "solid",
      strokeWidth: 2,
      strokeStyle: "solid",
      roughness: 0,
      opacity: 100,
      groupIds: [],
      roundness: null,
      boundElements: [{ type: "text", id: "text2" }],
    },
    {
      id: "text2",
      type: "text",
      version: 1,
      versionNonce: 1,
      isDeleted: false,
      x: 220,
      y: 120,
      width: 20,
      height: 20,
      angle: 0,
      strokeColor: "#000000",
      backgroundColor: "transparent",
      fillStyle: "solid",
      strokeWidth: 2,
      strokeStyle: "solid",
      roughness: 0,
      opacity: 100,
      groupIds: [],
      roundness: null,
      boundElements: [],
      text: "2",
      fontSize: 20,
      fontFamily: 1,
      textAlign: "center",
      verticalAlign: "middle",
      baseline: 18,
      containerId: "rect2",
      originalText: "2"
    },
    {
      id: "rect3",
      type: "rectangle",
      version: 1,
      versionNonce: 1,
      isDeleted: false,
      x: 300,
      y: 100,
      width: 60,
      height: 60,
      angle: 0,
      strokeColor: "#000000",
      backgroundColor: "#ffec99",
      fillStyle: "solid",
      strokeWidth: 2,
      strokeStyle: "solid",
      roughness: 0,
      opacity: 100,
      groupIds: [],
      roundness: null,
      boundElements: [{ type: "text", id: "text3" }],
    },
    {
      id: "text3",
      type: "text",
      version: 1,
      versionNonce: 1,
      isDeleted: false,
      x: 320,
      y: 120,
      width: 20,
      height: 20,
      angle: 0,
      strokeColor: "#000000",
      backgroundColor: "transparent",
      fillStyle: "solid",
      strokeWidth: 2,
      strokeStyle: "solid",
      roughness: 0,
      opacity: 100,
      groupIds: [],
      roundness: null,
      boundElements: [],
      text: "8",
      fontSize: 20,
      fontFamily: 1,
      textAlign: "center",
      verticalAlign: "middle",
      baseline: 18,
      containerId: "rect3",
      originalText: "8"
    },
    {
      id: "arrow1",
      type: "arrow",
      version: 1,
      versionNonce: 1,
      isDeleted: false,
      x: 130,
      y: 200,
      width: 100,
      height: 0,
      angle: 0,
      strokeColor: "#000000",
      backgroundColor: "transparent",
      fillStyle: "solid",
      strokeWidth: 2,
      strokeStyle: "solid",
      roughness: 0,
      opacity: 100,
      groupIds: [],
      roundness: {
        type: 2
      },
      boundElements: [],
      points: [[0, 0], [100, 0]],
      startBinding: null,
      endBinding: null,
    },
    {
      id: "text4",
      type: "text",
      version: 1,
      versionNonce: 1,
      isDeleted: false,
      x: 150,
      y: 220,
      width: 160,
      height: 25,
      angle: 0,
      strokeColor: "#000000",
      backgroundColor: "transparent",
      fillStyle: "solid",
      strokeWidth: 2,
      strokeStyle: "solid",
      roughness: 0,
      opacity: 100,
      groupIds: [],
      roundness: null,
      boundElements: [],
      text: "Compare and Swap",
      fontSize: 16,
      fontFamily: 1,
      textAlign: "center",
      verticalAlign: "middle",
      baseline: 18,
      containerId: null,
      originalText: "Compare and Swap"
    }
  ],
  appState: {
    viewBackgroundColor: "#AFEEEE",
    gridSize: 20,
  },
  files: {}
};

class ApiService {
  // Mock implementation for now
  async generateDiagram(request: DiagramRequest): Promise<AgentResponse> {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Mock response for bubble sort
    if (request.prompt.toLowerCase().includes('bubble sort')) {
      return {
        messageId: request.messageId,
        content: "I've created a simple visualization of bubble sort. The diagram shows three numbers (5, 2, 8) and demonstrates how adjacent elements are compared and swapped if they're in the wrong order.",
        diagramData: BUBBLE_SORT_DIAGRAM,
        status: 'success'
      };
    }

    // Default response for other prompts
    return {
      messageId: request.messageId,
      content: "I understand you want me to create a diagram for: " + request.prompt + ". However, I'm currently in mock mode and can only generate bubble sort diagrams.",
      status: 'success'
    };
  }
}

export const apiService = new ApiService(); 